services:
  api-gateway_develop:
    image: api-gateway
    build:
      context: .
      # dockerfile: Dockerfile
    container_name: api-gateway_dev
    environment:
      NODE_ENV: development
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db-users
      # DB_PORT: ${DB_PORT}
      PORT: ${PORT}
    ports:
      - ${PORT}:8008
    expose:
      - ${PORT}:8008
    networks:
      - api-gateway
    depends_on:
      db-users:
        condition: service_healthy
    restart: on-failure


  db-users:
    image: postgres:latest
    container_name: users-DB_gateway
    restart: always
    ports:
      - ${DB_PORT}:5432
    expose:
      - ${DB_PORT}:5432
    networks:
      - api-gateway
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      # https://github.com/peter-evans/docker-compose-healthcheck/pull/17
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 10s
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - /var/run/docker.sock:/var/run/docker.sock

  
  pgadmin:
    depends_on:
      - db-users
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      # PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      # PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: '10'
      # PGADMIN_CONFIG_ENABLE_PSQL: 'True'
    ports:
      - 80:80
    expose:
      - 80:80
    networks:
      - api-gateway
    volumes:
      - ./pgadmin:/var/lib/pgadmin
      - ./pgadmin:/certs/server.cert
      - ./pgadmin:/certs/server.key
      - ./pgadmin:/pgadmin4/servers.json

networks:
  api-gateway:
    driver: bridge